<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">5.4.&#160;Session</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="JMS-Client-0-8-Client-Understanding-Connection.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;5.&#160;Understanding the Qpid JMS client</th><td align="right" width="20%">&#160;<a accesskey="n" href="JMS-Client-0-8-Client-Understanding-MessageProducer.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title"><a id="JMS-Client-0-8-Client-Understanding-Session"></a>5.4.&#160;Session</h2></div></div></div><p>A Session object is a single-threaded context for producing and consuming messages.</p><p>Session objects are created from the Connection. Whilst Session objects are relatively
      lightweight, patterns utilising a single Session per message are not recommended.</p><p>The number of sessions open per connection at any one time is limited. This value is
      negotiated when the connection is made. It defaults to 256.</p><p>Qpid JMS Sessions have the ability to prefetch messages to improve consumer performance.
      This feature is described next.</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="JMS-Client-0-8-Client-Understanding-Session-Prefecth"></a>5.4.1.&#160;Prefetch</h3></div></div></div><p>Prefetch specifies how many messages the client will optimistically cache for delivery
        to a consumer. This is a useful parameter to tune that can improve the throughput of an
        application. The prefetch buffer is scoped per <span class="emphasis"><em>Session</em></span>.</p><p>The size of the prefetch buffer can be tuned per Connection using the connection url
        option <a class="link" href="JMS-Client-0-8-Connection-URL.html#JMS-Client-0-8-Connection-URL-ConnectionOptions-Maxprefetch"><code class="literal">maxprefetch</code></a> (or JVM wide using the system property <a class="link" href="JMS-Client-0-8-System-Properties.html#JMS-Client-0-8-System-Properties-Maxprefetch"><code class="literal">max_prefetch</code></a>). By default, prefetch defaults to 500.</p><p>There are situations when you may wish to consider reducing the size of prefetch:</p><p>
        </p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>When using a <a class="ulink" href="http://www.eaipatterns.com/CompetingConsumers.html" target="_top">Competing Consumers</a> pattern, prefetch can give the appearance of unequal
              division of work. This will be apparent on startup when the queue has messages. The
              first consumer started will cache prefetch size number of messages, possibly leaving
              the other consumers with no initial work.</p></li><li class="listitem"><p>When using special queue types (such as LVQs, Sorted Queue and Priority Queues).
              For these queue types the special delivery rules apply whilst the message resides on
              the Broker. As soon as the message is sent to the client it delivery order is then
              fixed. For example, if using a priority queue, and a prefetch of 100, and 100 messages
              arrive with priority 2, the broker will send these to the client. If then a new
              message arrives with priority 1, the broker cannot leap frog messages of the lower
              priority. The priority 1 message will be delivered at the front of the next
              batch.</p></li><li class="listitem"><p>When message size is large and you do not wish the memory footprint of the
              application to grow (or suffer an OutOfMemoryError).</p></li></ol></div><p>
      </p><p>Finally, if using multiple MessageConsumers on a single Session, keep in mind that
        unless you keep polling <span class="emphasis"><em>all</em></span> consumers, it is possible for some traffic
        patterns to result in consumer starvation and an application level deadlock. For example, if
        prefetch is 100, and 100 hundred messages arrive suitable for consumer A, those messages
        will be prefetched by the session, entirely filling the prefetch buffer. Now if the
        application performs a blocking <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/MessageConsumer.html#receive()" target="_top">MessageConsumer#receive()</a> for Consumer B on the same Session, the application
        will hang indefinitely as even if messages suitable for B arrive at the Broker. Those
        messages can never be sent to the Session as no space is available in prefetch. </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Please note, when the acknowlegement mode <span class="emphasis"><em>Session#SESSION_TRANSACTED</em></span>
       or <span class="emphasis"><em>Session#CLIENT_ACKNOWLEDGE</em></span> is set on a consuming session,
       the prefetched messages are released from the prefetch buffer on transaction commit/rollback
       (in case of acknowledgement mode <span class="emphasis"><em>Session#SESSION_TRANSACTED</em></span> )
       or acknowledgement of the messages receipt (in case of acknowledgement mode
       <span class="emphasis"><em>Session#CLIENT_ACKNOWLEDGE</em></span> ). If the consuming application does not commit/rollback
       the receiving transaction (for example, due to mistakes in application exception handling logic),
       the prefetched messages continue to remain in the prefetch buffer preventing the delivery of the following messages.
       As result, the application might stop the receiving of the messages
       until the transaction is committed/rolled back (for <span class="emphasis"><em>Session#SESSION_TRANSACTED</em></span> )
        or received messages are acknowledged (for <span class="emphasis"><em>Session#CLIENT_ACKNOWLEDGE</em></span>).</p></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="JMS-Client-0-8-Client-Understanding-Session-TemporaryQueues"></a>5.4.2.&#160;TemporaryQueues</h3></div></div></div><p>Qpid implements JMS temporary queues as AMQP auto-delete queues. The life cycle of these
        queues deviates from the JMS specification.</p><p>AMQP auto-delete queues are deleted either when the <span class="emphasis"><em>last</em></span> Consumer
        closes, or the Connection is closed. If no Consumer is ever attached to the queue, the queue
        will remain until the Connection is closed.</p><p>This deviation has no practical impact on the implementation of the <a class="ulink" href="http://www.eaipatterns.com/RequestReply.html" target="_top">request/reply messaging pattern</a>
        utilising a per-request temporary reply queue. The reply to queue is deleted as the
        application closes the Consumer awaiting the response. </p><p>Temporary queues are exposed to Management in the same way as normal queues. Temporary
        queue names take the form string <code class="literal">TempQueue</code> followed by a random
        UUID.</p><p>Note that <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/TemporaryQueue.html#delete()" target="_top">TemporaryQueue#delete()</a> merely marks the queue as deleted on within the JMS
        client (and prevents further use of the queue from the application), however, the Queue will
        remain on the Broker until the Consumer (or Connection) is closed.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="JMS-Client-0-8-Client-Understanding-Session-CreateQueue"></a>5.4.3.&#160;CreateQueue</h3></div></div></div><p>In the Qpid JMS client, <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#createQueue(java.lang.String)" target="_top">Session#createQueue()</a> accepts either a queue name, or a Binding URL. If only name
        is specified the destination will be resolved into binding URL:
        direct://amq.direct//&lt;queue name&gt;?routingkey=&#8217;&lt;queue name&gt;&#8217;&amp;durable=&#8217;true&#8217;. </p><p>Calling Session#createQueue() has no effect on the Broker.</p><p>Reiterating the advice from the JMS javadoc, it is suggested that this method is not
        generally used. Instead, application should lookup Destinations declared within JNDI.</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="JMS-Client-0-8-Client-Understanding-Session-CreateTopic"></a>5.4.4.&#160;CreateTopic</h3></div></div></div><p>In the Qpid JMS client, <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#createTopic(java.lang.String)" target="_top">Session#createTopic()</a> accepts either a topic name, or a Binding URL. If only name
        is specified the destination will be resolved into binding URL: topic://amq.topic//&lt;topic
        name&gt;?routingkey=&#8217;&lt;topic name&gt;&#8217;.</p><p>Calling Session#createTopic() has no effect on the Broker.</p><p>Reiterating the advice from the JMS javadoc, it is suggested that this method is not
        generally used. Instead, application should lookup Destinations declared within JNDI.</p></div></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="JMS-Client-0-8-Client-Understanding-Connection.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="JMS-Client-0-8-Client-Understanding.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="JMS-Client-0-8-Client-Understanding-MessageProducer.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">5.3.&#160;Connection&#160;</td><td align="center" width="20%"><a accesskey="h" href="index.html">Home</a></td><td align="right" valign="top" width="40%">&#160;5.5.&#160;MessageProducer</td></tr></table></div></div>