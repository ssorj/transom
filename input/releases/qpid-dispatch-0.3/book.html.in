<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!--
 Pandoc template for HTML content to go onto the Qpid web site.
 Such a fragment is just the contents of the <body> element,
 the site generation tools will add the <head> etc.
-->

<div id="header">
<h1 class="title">Qpid Dispatch Router Book</h1>
</div>
<div id="TOC">
<ul>
<li><a href="#introduction"><span class="toc-section-number">1</span> Introduction</a><ul>
<li><a href="#overview"><span class="toc-section-number">1.1</span> Overview</a></li>
<li><a href="#benefits"><span class="toc-section-number">1.2</span> Benefits</a></li>
<li><a href="#features"><span class="toc-section-number">1.3</span> Features</a></li>
</ul></li>
<li><a href="#using-qpid-dispatch"><span class="toc-section-number">2</span> Using Qpid Dispatch</a><ul>
<li><a href="#configuration"><span class="toc-section-number">2.1</span> Configuration</a></li>
<li><a href="#client-compatibility"><span class="toc-section-number">2.2</span> Client Compatibility</a></li>
<li><a href="#tools"><span class="toc-section-number">2.3</span> Tools</a><ul>
<li><a href="#qdstat"><span class="toc-section-number">2.3.1</span> qdstat</a></li>
<li><a href="#qdmanage"><span class="toc-section-number">2.3.2</span> qdmanage</a></li>
</ul></li>
<li><a href="#features-and-examples"><span class="toc-section-number">2.4</span> Features and Examples</a><ul>
<li><a href="#standalone-and-interior-modes"><span class="toc-section-number">2.4.1</span> Standalone and Interior Modes</a></li>
<li><a href="#mobile-subscribers"><span class="toc-section-number">2.4.2</span> Mobile Subscribers</a></li>
<li><a href="#dynamic-reply-to"><span class="toc-section-number">2.4.3</span> Dynamic Reply-To</a></li>
</ul></li>
</ul></li>
<li><a href="#addressing"><span class="toc-section-number">3</span> Addressing</a><ul>
<li><a href="#routing-patterns"><span class="toc-section-number">3.1</span> Routing patterns</a></li>
<li><a href="#routing-mechanisms"><span class="toc-section-number">3.2</span> Routing mechanisms</a><ul>
<li><a href="#message-routing"><span class="toc-section-number">3.2.1</span> Message routing</a></li>
</ul></li>
</ul></li>
<li><a href="#amqp-mapping"><span class="toc-section-number">4</span> AMQP Mapping</a><ul>
<li><a href="#message-annotations"><span class="toc-section-number">4.1</span> Message Annotations</a></li>
<li><a href="#sourcetarget-capabilities"><span class="toc-section-number">4.2</span> Source/Target Capabilities</a></li>
<li><a href="#addresses-and-address-formats"><span class="toc-section-number">4.3</span> Addresses and Address Formats</a><ul>
<li><a href="#address-patterns"><span class="toc-section-number">4.3.1</span> Address Patterns</a></li>
<li><a href="#supported-addresses"><span class="toc-section-number">4.3.2</span> Supported Addresses</a></li>
</ul></li>
<li><a href="#implementation-of-the-amqp-management-specification"><span class="toc-section-number">4.4</span> Implementation of the AMQP Management Specification</a></li>
</ul></li>
<li><a href="#management-schema"><span class="toc-section-number">5</span> Management Schema</a><ul>
<li><a href="#configuration-entities"><span class="toc-section-number">5.1</span> Configuration Entities</a><ul>
<li><a href="#container"><span class="toc-section-number">5.1.1</span> container</a></li>
<li><a href="#router"><span class="toc-section-number">5.1.2</span> router</a></li>
<li><a href="#listener"><span class="toc-section-number">5.1.3</span> listener</a></li>
<li><a href="#connector"><span class="toc-section-number">5.1.4</span> connector</a></li>
<li><a href="#log"><span class="toc-section-number">5.1.5</span> log</a></li>
<li><a href="#fixedaddress"><span class="toc-section-number">5.1.6</span> fixedAddress</a></li>
<li><a href="#waypoint"><span class="toc-section-number">5.1.7</span> waypoint</a></li>
</ul></li>
<li><a href="#operational-entities"><span class="toc-section-number">5.2</span> Operational Entities</a><ul>
<li><a href="#router.link"><span class="toc-section-number">5.2.1</span> router.link</a></li>
<li><a href="#router.address"><span class="toc-section-number">5.2.2</span> router.address</a></li>
<li><a href="#router.node"><span class="toc-section-number">5.2.3</span> router.node</a></li>
<li><a href="#connection"><span class="toc-section-number">5.2.4</span> connection</a></li>
<li><a href="#allocator"><span class="toc-section-number">5.2.5</span> allocator</a></li>
</ul></li>
</ul></li>
</ul>
</div>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<h1 id="introduction"><span class="header-section-number">1</span> Introduction</h1>
<h2 id="overview"><span class="header-section-number">1.1</span> Overview</h2>
<p>The Dispatch router is an AMQP message message router that provides advanced interconnect capabilities. It allows flexible routing of messages between any AMQP-enabled endpoints, whether they be clients, servers, brokers or any other entity that can send or receive standard AMQP messages.</p>
<p>A messaging client can make a single AMQP connection into a messaging bus built of Dispatch routers and, over that connection, exchange messages with one or more message brokers, and at the same time exchange messages directly with other endpoints without involving a broker at all.</p>
<p>The router is an intermediary for messages but it is <em>not</em> a broker. It does not <em>take responsibility for</em> messages. It will, however, propagate settlement and disposition across a network such that delivery guarantees are met. In other words: the router network will deliver the message, possibly via several intermediate routers, <em>and</em> it will route the acknowledgement of that message by the ultimate reciever back across the same path. This means that <em>responsibility</em> for the message is transfered from the original sender to the ultimate receiver <em>as if they were directly connected</em>. However this is done via a flexible network that allows highly configurable routing of the message transparent to both sender and receiver.</p>
<p>There are some patterns where this enables &quot;brokerless messaging&quot; approaches that are preferable to brokered approaches. In other cases a broker is essential (in particular where you need the separation of responsibility and/or the buffering provided by store-and-forward) but a dispatch network can still be useful to tie brokers and clients together into patterns that are difficult with a single broker.</p>
<p>For a &quot;brokerless&quot; example, consider the common brokered implementation of the request-response pattern, a client puts a request on a queue and then waits for a reply on another queue. In this case the broker can be a hindrance - the client may want to know immediatly if there is nobody to serve the request, but typically it can only wait for a timeout to discover this. With a dispatch network, the client can be informed immediately if its message cannot be delivered because nobody is listening. When the client receives acknowledgement of the request it knows not just that it is sitting on a queue, but that it has actually been received by the server.</p>
<p>For an exampe of using dispatch to enhance the use of brokers, consider using an array of brokers to implement a scalable distributed work queue. A dispatch network can make this appear as a single queue, with senders publishing to a single address and receivers subscribing to a single address. The dispatch network can distribute work to any broker in the array and collect work from any broker for any receiver. Brokers can be shut down or added without affecting clients. This elegantly solves the common difficult of &quot;stuck messages&quot; when implementing this pattern with brokers alone. If a receiver is connected to a broker that has no messages, but there are messages on another broker, you have to somehow transfer them or leave them &quot;stuck&quot;. With a dispatch network, <em>all</em> the receivers are connected to <em>all</em> the brokers. If there is a message anywhere it can be delivered to any receiver.</p>
<p>The router is meant to be deployed in topologies of multiple routers, preferably with redundant paths. It uses link-state routing protocols and algorithms (similar to OSPF or IS-IS from the networking world) to calculate the best path from every point to every other point and to recover quickly from failures. It does not need to use clustering for high availability; rather, it relies on redundant paths to provide continued connectivity in the face of system or network failure. Because it never takes responsibility for messages it is effectively stateless, messages not delivered to their final destination will not be acknowledged to the sender and therefore the sender can re-send such messages if it is disconnected from the network.</p>
<h2 id="benefits"><span class="header-section-number">1.2</span> Benefits</h2>
<ul>
<li>Simplifies connectivity</li>
<li>An endpoint can do all of its messaging through a single transport connection</li>
<li>Avoid opening holes in firewalls for incoming connections</li>
<li>Simplifies reliability</li>
<li>Reliability and availability are provided using redundant topology, not server clustering</li>
<li>Reliable end-to-end messaging without persistent stores</li>
<li>Use a message broker only when you need store-and-forward semantics</li>
</ul>
<h2 id="features"><span class="header-section-number">1.3</span> Features</h2>
<ul>
<li>Supports arbitrary topology - no restrictions on redundancy</li>
<li>Automatic route computation - adjusts quickly to changes in topology</li>
<li>Cost-based route computation</li>
<li><a href="#addressing">Rich addressing semantics</a></li>
<li>Security</li>
</ul>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<h1 id="using-qpid-dispatch"><span class="header-section-number">2</span> Using Qpid Dispatch</h1>
<h2 id="configuration"><span class="header-section-number">2.1</span> Configuration</h2>
<p>The default configuration file is installed in <em>install-prefix</em>/etc/qpid/qdrouterd.conf. This configuration file will cause the router to run in standalone mode, listening on the standard AMQP port (5672). Dispatch Router looks for the configuration file in the installed location by default. If you wish to use a different path, the &quot;-c&quot; command line option will instruct Dispatch Router as to which configuration to load.</p>
<p>To run the router, invoke the executable: qdrouterd [-c my-config-file]</p>
<p>For more details of the configuration file see the <code>qdrouterd.conf(5)</code> man page.</p>
<h2 id="client-compatibility"><span class="header-section-number">2.2</span> Client Compatibility</h2>
<p>Dispatch Router should, in theory, work with any client that is compatible with AMQP 1.0. The following clients have been tested:</p>
<table>
<thead>
<tr class="header">
<th align="left"><em>Client</em></th>
<th align="left"><em>Notes</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">qpid::messaging</td>
<td align="left">The Qpid messaging clients work with Dispatch Router as long as they are configured to use the 1.0 version of the protocol. To enable AMQP 1.0 in the C++ client, use the {protocol:amqp1.0} connection option.</td>
</tr>
<tr class="even">
<td align="left">Proton Messenger</td>
<td align="left">Messenger works with Dispatch Router.</td>
</tr>
</tbody>
</table>
<h2 id="tools"><span class="header-section-number">2.3</span> Tools</h2>
<h3 id="qdstat"><span class="header-section-number">2.3.1</span> qdstat</h3>
<p><em>qdstat</em> is a command line tool that lets you view the status of a Dispatch Router. The following options are useful for seeing that the router is doing:</p>
<table>
<thead>
<tr class="header">
<th align="left"><em>Option</em></th>
<th align="left"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">-l</td>
<td align="left">Print a list of AMQP links attached to the router. Links are unidirectional. Outgoing links are usually associated with a subscription address. The tool distinguishes between <em>endpoint</em> links and <em>router</em> links. Endpoint links are attached to clients using the router. Router links are attached to other routers in a network of routbers.</td>
</tr>
<tr class="even">
<td align="left">-a</td>
<td align="left">Print a list of addresses known to the router.</td>
</tr>
<tr class="odd">
<td align="left">-n</td>
<td align="left">Print a list of known routers in the network.</td>
</tr>
<tr class="even">
<td align="left">-c</td>
<td align="left">Print a list of connections to the router.</td>
</tr>
</tbody>
</table>
<p>For complete details see the <code>qdstat(8)</code> man page and the output of <code>qdstat --help</code>.</p>
<h3 id="qdmanage"><span class="header-section-number">2.3.2</span> qdmanage</h3>
<p><em>qdmanage</em> is a general-purpose AMQP management client that allows you to not only view but modify the configuration of a running dispatch router.</p>
<p>For example you can query all the connection entities in the route r $ qdrouterd query --type connection</p>
<p>To enable logging debug and higher level messages by default: $ qdrouter update log/DEFAULT enable=debug+</p>
<p>In fact, everything that can be configured in the configuration file can also be created in a running router via management. For example to create a new listener in a running router: $ qdrouter create type=listener port=5555</p>
<p>Now you can connect to port 5555, for exampple $ qdrouterd query -b localhost:5555 --type listener</p>
<p>For complete details see the <code>qdmanage(8)</code> man page and the output of <code>qdmanage --help</code>. Also for details of what can be configured see the <code>qdrouterd.conf(5)</code> man page.</p>
<h2 id="features-and-examples"><span class="header-section-number">2.4</span> Features and Examples</h2>
<h3 id="standalone-and-interior-modes"><span class="header-section-number">2.4.1</span> Standalone and Interior Modes</h3>
<p>The router can operate stand-alone or as a node in a network of routers. The mode is configured in the <em>router</em> section of the configuration file. In stand-alone mode, the router does not attempt to collaborate with any other routers and only routes messages among directly connected endpoints.</p>
<p>If your router is running in stand-alone mode, <em>qdstat -a</em> will look like the following:</p>
<pre><code>$ qdstat -a
Router Addresses
  class  address      in-proc  local  remote  in  out  thru  to-proc  from-proc
  ===============================================================================
  local  $management  Y        0      0       1   0    0     1        0
  local  temp.AY81ga           1      0       0   0    0     0        0</code></pre>
<p>Note that there are two known addresses. <em>$management</em> is the address of the router's embedded management agent. <em>temp.AY81ga</em> is the temporary reply-to address of the <em>qdstat</em> client making requests to the agent.</p>
<p>If you change the mode to interior and restart the processs, the same command will yield two additional addresses which are used for inter-router communication:</p>
<pre><code>$ qdstat -a
Router Addresses
  class  address      in-proc  local  remote  in  out  thru  to-proc  from-proc
  ===============================================================================
  local  $management  Y        0      0       1   0    0     1        0
  local  qdhello      Y        0      0       0   0    0     0        3
  local  qdrouter     Y        0      0       0   0    0     0        1
  local  temp.khOpGb           1      0       0   0    0     0        0</code></pre>
<h3 id="mobile-subscribers"><span class="header-section-number">2.4.2</span> Mobile Subscribers</h3>
<p>The term &quot;mobile subscriber&quot; simply refers to the fact that a client may connect to the router and subscribe to an address to receive messages sent to that address. No matter where in the network the subscriber attaches, the messages will be routed to the appropriate destination.</p>
<p>To illustrate a subscription on a stand-alone router, you can use the examples that are provided with Qpid Proton. Using the <em>recv.py</em> example receiver:</p>
<pre><code>$ recv.py amqp://0.0.0.0/my-address</code></pre>
<p>This command creates a receiving link subscribed to the specified address. To verify the subscription:</p>
<pre><code>$ qdstat -a
Router Addresses
  class   address      in-proc  local  remote  in  out  thru  to-proc  from-proc
  ================================================================================
  local   $management  Y        0      0       1   0    0     1        0
  mobile  my-address            1      0       0   0    0     0        0
  local   temp.fDt8_a           1      0       0   0    0     0        0</code></pre>
<p>You can then, in a separate command window, run a sender to produce messages to that address:</p>
<pre><code>$ send.py -a amqp://0.0.0.0/my-address</code></pre>
<h3 id="dynamic-reply-to"><span class="header-section-number">2.4.3</span> Dynamic Reply-To</h3>
<p>Dynamic reply-to can be used to obtain a reply-to address that routes back to a client's receiving link regardless of how many hops it has to take to get there. To illustrate this feature, see below a simple program (written in C++ against the qpid::messaging API) that queries the management agent of the attached router for a list of other known routers' management addresses.</p>
<pre><code>#include &lt;qpid/messaging/Address.h&gt;
#include &lt;qpid/messaging/Connection.h&gt;
#include &lt;qpid/messaging/Message.h&gt;
#include &lt;qpid/messaging/Receiver.h&gt;
#include &lt;qpid/messaging/Sender.h&gt;
#include &lt;qpid/messaging/Session.h&gt;

using namespace qpid::messaging;
using namespace qpid::types;

using std::stringstream;
using std::string;

int main() {
    const char* url = &quot;amqp:tcp:127.0.0.1:5672&quot;;
    std::string connectionOptions = &quot;{protocol:amqp1.0}&quot;;

    Connection connection(url, connectionOptions);
    connection.open();
    Session session = connection.createSession();
    Sender sender = session.createSender(&quot;mgmt&quot;);

    // create reply receiver and get the reply-to address
    Receiver receiver = session.createReceiver(&quot;#&quot;);
    Address responseAddress = receiver.getAddress();

    Message request;
    request.setReplyTo(responseAddress);
    request.setProperty(&quot;x-amqp-to&quot;, &quot;amqp:/_local/$management&quot;);
    request.setProperty(&quot;operation&quot;, &quot;DISCOVER-MGMT-NODES&quot;);
    request.setProperty(&quot;type&quot;, &quot;org.amqp.management&quot;);
    request.setProperty(&quot;name, &quot;self&quot;);

    sender.send(request);
    Message response = receiver.fetch();
    Variant content(response.getContentObject());
    std::cout &lt;&lt; &quot;Response: &quot; &lt;&lt; content &lt;&lt; std::endl &lt;&lt; std::endl;

    connection.close();
}</code></pre>
<p>The equivalent program written in Python against the Proton Messenger API:</p>
<pre><code>from proton import Messenger, Message

def main():
    host = &quot;0.0.0.0:5672&quot;

    messenger = Messenger()
    messenger.start()
    messenger.route(&quot;amqp:/*&quot;, &quot;amqp://%s/$1&quot; % host)
    reply_subscription = messenger.subscribe(&quot;amqp:/#&quot;)
    reply_address = reply_subscription.address

    request  = Message()
    response = Message()

    request.address = &quot;amqp:/_local/$management&quot;
    request.reply_to = reply_address
    request.properties = {u&#39;operation&#39; : u&#39;DISCOVER-MGMT-NODES&#39;,
                          u&#39;type&#39;      : u&#39;org.amqp.management&#39;,
                          u&#39;name&#39;      : u&#39;self&#39;}

    messenger.put(request)
    messenger.send()
    messenger.recv()
    messenger.get(response)

    print &quot;Response: %r&quot; % response.body

    messenger.stop()

main()</code></pre>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<h1 id="addressing"><span class="header-section-number">3</span> Addressing</h1>
<p>AMQP addresses are used to control the flow of messages across a network of routers. Addresses are used in a number of different places in the AMQP 1.0 protocol. They can be used in a specific message in the <code>to</code> and <code>reply-to</code> fields of a message's properties. They are also used during the creation of links in the <code>address</code> field of a <code>source</code> or a <code>target</code>.</p>
<p>Addresses designate various kinds of entities in a messaging network:</p>
<ul>
<li>Endpoint processes that consume data or offer a service</li>
<li>Topics that match multiple consumers to multiple producers</li>
<li>Entities within a messaging broker:</li>
<li>Queues</li>
<li>Durable Topics</li>
<li>Exchanges</li>
</ul>
<p>The syntax of an AMQP address is opaque as far as the router network is concerned. A syntactical structure may be used by the administrator that creates addresses, but the router treats them as opaque strings. Routers consider addresses to be mobile such that any address may be directly connected to any router in a network and may move around the topology. In cases where messages are broadcast to or balanced across multiple consumers, an address may be connected to multiple routers in the network.</p>
<p>Addresses have semantics associated with them. When an address is created in the network, it is assigned a set of semantics (and access rules) during a process called provisioning. The semantics of an address control how routers behave when they see the address being used.</p>
<p>Address semantics include the following considerations:</p>
<ul>
<li><em>Routing pattern</em> - direct, multicast, balanced</li>
<li><em>Undeliverable action</em> - drop, hold and retry, redirect</li>
<li><em>Reliability</em> - N destinations, etc.</li>
</ul>
<h2 id="routing-patterns"><span class="header-section-number">3.1</span> Routing patterns</h2>
<p>Routing patterns constrain the paths that a message can take across a network.</p>
<table>
<thead>
<tr class="header">
<th align="left"><em>Pattern</em></th>
<th align="left"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><em>Direct</em></td>
<td align="left">Direct routing allows for only one consumer to use an address at a time. Messages (or links) follow the lowest cost path across the network from the sender to the one receiver.</td>
</tr>
<tr class="even">
<td align="left"><em>Multicast</em></td>
<td align="left">Multicast routing allows multiple consumers to use the same address at the same time. Messages are routed such that each consumer receives a copy of the message.</td>
</tr>
<tr class="odd">
<td align="left"><em>Balanced</em></td>
<td align="left">Balanced routing also allows multiple consumers to use the same address. In this case, messages are routed to exactly one of the consumers, and the network attempts to balance the traffic load across the set of consumers using the same address.</td>
</tr>
</tbody>
</table>
<h2 id="routing-mechanisms"><span class="header-section-number">3.2</span> Routing mechanisms</h2>
<p>The fact that addresses can be used in different ways suggests that message routing can be accomplished in different ways. Before going into the specifics of the different routing mechanisms, it would be good to first define what is meant by the term <em>routing</em>:</p>
<blockquote>
<p>In a network built of multiple routers connected by connections (i.e., nodes and edges in a graph), <em>routing</em> determines which connection to use to send a message directly to its destination or one step closer to its destination.</p>
</blockquote>
<p>Each router serves as the terminus of a collection of incoming and outgoing links. The links either connect directly to endpoints that produce and consume messages, or they connect to other routers in the network along previously established connections.</p>
<h3 id="message-routing"><span class="header-section-number">3.2.1</span> Message routing</h3>
<p>Message routing occurs upon delivery of a message and is done based on the address in the message's <code>to</code> field.</p>
<p>When a delivery arrives on an incoming link, the router extracts the address from the delivered message's <code>to</code> field and looks the address up in its routing table. The lookup results in zero or more outgoing links onto which the message shall be resent.</p>
<table>
<thead>
<tr class="header">
<th align="left"><em>Delivery</em></th>
<th align="left"><em>Handling</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><em>pre-settled</em></td>
<td align="left">If the arriving delivery is pre-settled (i.e., fire and forget), the incoming delivery shall be settled by the router, and the outgoing deliveries shall also be pre-settled. In other words, the pre-settled nature of the message delivery is propagated across the network to the message's destination.</td>
</tr>
<tr class="even">
<td align="left"><em>unsettled</em></td>
<td align="left">Unsettled delivery is also propagated across the network. Because unsettled delivery records cannot be discarded, the router tracks the incoming deliveries and keeps the association of the incoming deliveries to the resulting outgoing deliveries. This kept association allows the router to continue to propagate changes in delivery state (settlement and disposition) back and forth along the path which the message traveled.</td>
</tr>
</tbody>
</table>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<h1 id="amqp-mapping"><span class="header-section-number">4</span> AMQP Mapping</h1>
<p>Dispatch Router is an AMQP router and as such, it provides extensions, codepoints, and semantics for routing over AMQP. This page documents the details of Dispatch Router's use of AMQP.</p>
<h2 id="message-annotations"><span class="header-section-number">4.1</span> Message Annotations</h2>
<p>The following Message Annotation fields are defined by Dispatch Router:</p>
<table>
<thead>
<tr class="header">
<th align="left"><em>Field</em></th>
<th align="left"><em>Type</em></th>
<th align="left"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><span style="white-space: nowrap;">x-opt-qd.ingress</span></td>
<td align="left">string</td>
<td align="left">The identity of the ingress router for a message-routed message. The ingress router is the first router encountered by a transiting message. The router will, if this field is present, leave it unaltered. If the field is not present, the router shall insert the field with its own identity.</td>
</tr>
<tr class="even">
<td align="left"><span style="white-space: nowrap;">x-opt-qd.trace</span></td>
<td align="left">list of string</td>
<td align="left">The list of routers through which this message-routed message has transited. If this field is not present, the router shall do nothing. If the field is present, the router shall append its own identity to the end of the list.</td>
</tr>
<tr class="odd">
<td align="left">x-opt-qd.to</td>
<td align="left">string</td>
<td align="left">To-Override for message-routed messages. If this field is present, the address in this field shall be used for routing in lieu of the <em>to</em> field in the message properties. A router may append, remove, or modify this annotation field depending on the policy in place for routing the message.</td>
</tr>
<tr class="even">
<td align="left">x-opt-qd.class</td>
<td align="left">string</td>
<td align="left">Message class. This is used to allow the router to provide separate paths for different classes of traffic.</td>
</tr>
</tbody>
</table>
<h2 id="sourcetarget-capabilities"><span class="header-section-number">4.2</span> Source/Target Capabilities</h2>
<p>The following Capability values are used in Sources and Targets.</p>
<table>
<thead>
<tr class="header">
<th align="left"><em>Capability</em></th>
<th align="left"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">qd.router</td>
<td align="left">This capability is added to sources and targets that are used for inter-router message exchange.</td>
</tr>
</tbody>
</table>
<h2 id="addresses-and-address-formats"><span class="header-section-number">4.3</span> Addresses and Address Formats</h2>
<p>The following AMQP addresses and address patterns are used within Dispatch Router.</p>
<h3 id="address-patterns"><span class="header-section-number">4.3.1</span> Address Patterns</h3>
<table>
<thead>
<tr class="header">
<th align="left"><em>Pattern</em></th>
<th align="left"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>_local/&lt;addr&gt;</code></td>
<td align="left">An address that references a locally attached endpoint. Messages using this address pattern shall not be routed over more than one link.</td>
</tr>
<tr class="even">
<td align="left"><code>_topo/&lt;area&gt;/&lt;router&gt;/&lt;addr&gt;</code></td>
<td align="left">An address that references an endpoint attached to a specific router node in the network topology. Messages with addresses that follow this pattern shall be routed along the shortest path to the specified router. Note that addresses of this form are a-priori routable in that the address itself contains enough information to route the message to its destination.</td>
</tr>
<tr class="odd">
<td align="left"><code>&lt;addr&gt;</code></td>
<td align="left">A mobile address. An address of this format represents an endpoint or a set of distinct endpoints that are attached to the network in arbitrary locations. It is the responsibility of the router network to determine which router nodes are valid destinations for mobile addresses.</td>
</tr>
</tbody>
</table>
<h3 id="supported-addresses"><span class="header-section-number">4.3.2</span> Supported Addresses</h3>
<table>
<thead>
<tr class="header">
<th align="left"><em>Address</em></th>
<th align="left"><em>Description</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left"><code>_local/$management</code></td>
<td align="left">The management agent on the attached router/container. This address would be used by an endpoint that is a management client/console/tool wishing to access management data from the attached container.</td>
</tr>
<tr class="even">
<td align="left"><code>_topo/0/Router.E/agent</code></td>
<td align="left">The management agent at Router.E in area 0. This address would be used by a management client wishing to access management data from a specific container that is reachable within the network.</td>
</tr>
<tr class="odd">
<td align="left"><code>_local/qdhello</code></td>
<td align="left">The router entity in each of the connected routers. This address is used to communicate with neighbor routers and is exclusively for the HELLO discovery protocol.</td>
</tr>
<tr class="even">
<td align="left"><code>_local/qdrouter</code></td>
<td align="left">The router entity in each of the connected routers. This address is used by a router to communicate with other routers in the network.</td>
</tr>
<tr class="odd">
<td align="left"><code>_topo/0/Router.E/qdxrouter</code></td>
<td align="left">The router entity at the specifically indicated router. This address form is used by a router to communicate with a specific router that may or may not be a neighbor.</td>
</tr>
</tbody>
</table>
<h2 id="implementation-of-the-amqp-management-specification"><span class="header-section-number">4.4</span> Implementation of the AMQP Management Specification</h2>
<p>Qpid Dispatch is manageable remotely via AMQP. It is compliant with the emerging AMQP Management specification (draft 9).</p>
<p>Differences from the specification:</p>
<ul>
<li>The &quot;name&quot; attribute is not required when an entity is created. If not supplied it will be set to the same value as the system-generated &quot;identity&quot; attribute. Otherwise it is treated as per the standard.</li>
<li>The REGISTER operation is not implementd. The router has its own mechansm to discover peers that does not require this operation.</li>
<li>The DEREGISTER operation is not implementd. The router has its own mechansm to discover peers that does not require this operation.</li>
</ul>
<h1 id="management-schema"><span class="header-section-number">5</span> Management Schema</h1>
<p>This chapter documents the set of <em>management entity types</em> that define configuration and management of a Dispatch Router.</p>
<p>All management entity types have the following attributes:</p>
<ul>
<li><p><em>type</em>: The fully qualified type of the entity, e.g. <code>org.apache.qpid.dispatch.router</code>. In this documentation and when using dispatch tools you can use the short name of the type, e.g. <code>router</code></p></li>
<li><p><em>identity</em>: A system-generated identity of the entity. It includes the short type name and some identifying information. E.g. <code>log/AGENT</code> or <code>listener/localhost:amqp</code></p></li>
</ul>
<p>There are two kinds of management entity type.</p>
<ul>
<li><p><em>Configuration</em> Entities: Parameters that can be set in the configuration file (see <code>qdrouterd.conf(5)</code> man page) or set at run-time with the <code>qdmanage(8)</code> tool.</p></li>
<li><p><em>Operational</em> Entities: Run-time status values that can be queried using <code>qdstat(8)</code> or <code>qdmanage(8)</code> tools.</p></li>
</ul>
<h2 id="configuration-entities"><span class="header-section-number">5.1</span> Configuration Entities</h2>
<p>Configuration entities define the attributes allowed in the configuration file (see <code>qdrouterd.conf(5)</code>) but you can also create entities once the router is running using the <code>qdrouterd(8)</code> tool's <code>create</code> operation. Some entities can also be modified using the <code>update</code> operation, see the entity descriptions below.</p>
<h3 id="container"><span class="header-section-number">5.1.1</span> container</h3>
<p>Attributes related to the AMQP container.</p>
<dl>
<dt><em>containerName</em> (String)</dt>
<dd><p>The name of the AMQP container. If not specified, the container name will be set to a value of the container's choosing. The automatically assigned container name is not guaranteed to be persistent across restarts of the container.</p>
</dd>
<dt><em>workerThreads</em> (Integer, default=1)</dt>
<dd><p>The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) .</p>
</dd>
<dt><em>debugDump</em> (String)</dt>
<dd><p>A file to dump debugging information that can't be logged normally.</p>
</dd>
</dl>
<p>Operations allowed: READ</p>
<h3 id="router"><span class="header-section-number">5.1.2</span> router</h3>
<p>Tracks peer routers and computes routes to destinations.</p>
<dl>
<dt><em>routerId</em> (String)</dt>
<dd><p>Router's unique identity.</p>
</dd>
<dt><em>mode</em> (One of ['standalone', 'interior', 'edge', 'endpoint'], default='standalone')</dt>
<dd><p>In standalone mode, the router operates as a single component. It does not participate in the routing protocol and therefore will not coorperate with other routers. In interior mode, the router operates in cooreration with other interior routers in an interconnected network. In edge mode, the router operates with an uplink into an interior router network. Edge routers are typically used as connection concentrators or as security firewalls for access into the interior network.</p>
</dd>
<dt><em>area</em> (String)</dt>
<dd><p>Unused placeholder.</p>
</dd>
<dt><em>helloInterval</em> (Integer, default=1)</dt>
<dd><p>Interval in seconds between HELLO messages sent to neighbor routers.</p>
</dd>
<dt><em>helloMaxAge</em> (Integer, default=3)</dt>
<dd><p>Time in seconds after which a neighbor is declared lost if no HELLO is received.</p>
</dd>
<dt><em>raInterval</em> (Integer, default=30)</dt>
<dd><p>Interval in seconds between Router-Advertisements sent to all routers.</p>
</dd>
<dt><em>remoteLsMaxAge</em> (Integer, default=60)</dt>
<dd><p>Time in seconds after which link state is declared stale if no RA is received.</p>
</dd>
<dt><em>mobileAddrMaxAge</em> (Integer, default=60)</dt>
<dd><p>Time in seconds after which mobile addresses are declared stale if no RA is received.</p>
</dd>
<dt><em>addrCount</em> (Integer)</dt>
<dd><p>Number of addresses known to the router.</p>
</dd>
<dt><em>linkCount</em> (Integer)</dt>
<dd><p>Number of links attached to the router node.</p>
</dd>
<dt><em>nodeCount</em> (Integer)</dt>
<dd><p>Number of known peer router nodes.</p>
</dd>
</dl>
<p>Operations allowed: READ</p>
<h3 id="listener"><span class="header-section-number">5.1.3</span> listener</h3>
<p>Listens for incoming connections to the router.</p>
<dl>
<dt><em>addr</em> (String, default='0.0.0.0')</dt>
<dd><p>Host address: ipv4 or ipv6 literal or a host name.</p>
</dd>
<dt><em>port</em> (String, default='amqp')</dt>
<dd><p>Port number or symbolic service name.</p>
</dd>
<dt><em>role</em> (One of ['normal', 'inter-router', 'on-demand'], default='normal')</dt>
<dd><p>The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection. In the inter-router role, the connection is assumed to be to another router in the network. Inter-router discovery and routing protocols can only be used over interRouter connections.</p>
</dd>
<dt><em>certDb</em> (String)</dt>
<dd><p>The path to the database that contains the public certificates of trusted certificate authorities (CAs).</p>
</dd>
<dt><em>certFile</em> (String)</dt>
<dd><p>The path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile.</p>
</dd>
<dt><em>keyFile</em> (String)</dt>
<dd><p>The path to the file containing the PEM-formatted private key for the above certificate.</p>
</dd>
<dt><em>passwordFile</em> (String)</dt>
<dd><p>If the above private key is password protected, this is the path to a file containing the password that unlocks the certificate key.</p>
</dd>
<dt><em>password</em> (String)</dt>
<dd><p>An alternative to storing the password in a file referenced by passwordFile is to supply the password right here in the configuration file. This option can be used by supplying the password in the 'password' option. Don't use both password and passwordFile in the same profile.</p>
</dd>
<dt><em>saslMechanisms</em> (String, required)</dt>
<dd><p>Comma separated list of accepted SASL authentication mechanisms.</p>
</dd>
<dt><em>requirePeerAuth</em> (Boolean, default=True)</dt>
<dd><p>Only for listeners using SSL. If set to 'yes', attached clients will be required to supply a certificate. If the certificate is not traceable to a CA in the ssl profile's cert-db, authentication fails for the connection.</p>
</dd>
<dt><em>trustedCerts</em> (String)</dt>
<dd><p>This optional setting can be used to reduce the set of available CAs for client authentication. If used, this setting must provide a path to a PEM file that contains the trusted certificates.</p>
</dd>
<dt><em>allowUnsecured</em> (Boolean)</dt>
<dd><p>For listeners using SSL only. If set to 'yes', this option causes the listener to watch the initial network traffic to determine if the client is using SSL or is running in-the-clear. The listener will enable SSL only if the client uis using SSL.</p>
</dd>
<dt><em>allowNoSasl</em> (Boolean)</dt>
<dd><p>If set to 'yes', this option causes the listener to allow clients to connect even if they skip the SASL authentication protocol.</p>
</dd>
<dt><em>maxFrameSize</em> (Integer, default=65536)</dt>
<dd><p>Defaults to 65536. If specified, it is the maximum frame size in octets that will be used in the connection-open negotiation with a connected peer. The frame size is the largest contiguous set of uniterruptible data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity.</p>
</dd>
</dl>
<p>Operations allowed: CREATE, READ</p>
<h3 id="connector"><span class="header-section-number">5.1.4</span> connector</h3>
<p>Establishes an outgoing connections from the router.</p>
<dl>
<dt><em>addr</em> (String, default='0.0.0.0')</dt>
<dd><p>Host address: ipv4 or ipv6 literal or a host name.</p>
</dd>
<dt><em>port</em> (String, default='amqp')</dt>
<dd><p>Port number or symbolic service name.</p>
</dd>
<dt><em>role</em> (One of ['normal', 'inter-router', 'on-demand'], default='normal')</dt>
<dd><p>The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection. In the inter-router role, the connection is assumed to be to another router in the network. Inter-router discovery and routing protocols can only be used over interRouter connections.</p>
</dd>
<dt><em>certDb</em> (String)</dt>
<dd><p>The path to the database that contains the public certificates of trusted certificate authorities (CAs).</p>
</dd>
<dt><em>certFile</em> (String)</dt>
<dd><p>The path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile.</p>
</dd>
<dt><em>keyFile</em> (String)</dt>
<dd><p>The path to the file containing the PEM-formatted private key for the above certificate.</p>
</dd>
<dt><em>passwordFile</em> (String)</dt>
<dd><p>If the above private key is password protected, this is the path to a file containing the password that unlocks the certificate key.</p>
</dd>
<dt><em>password</em> (String)</dt>
<dd><p>An alternative to storing the password in a file referenced by passwordFile is to supply the password right here in the configuration file. This option can be used by supplying the password in the 'password' option. Don't use both password and passwordFile in the same profile.</p>
</dd>
<dt><em>saslMechanisms</em> (String, required)</dt>
<dd><p>Comma separated list of accepted SASL authentication mechanisms.</p>
</dd>
<dt><em>allowRedirect</em> (Boolean, default=True)</dt>
<dd><p>Allow the peer to redirect this connection to another address.</p>
</dd>
<dt><em>maxFrameSize</em> (Integer, default=65536)</dt>
<dd><p>Maximum frame size in octets that will be used in the connection-open negotiation with a connected peer. The frame size is the largest contiguous set of uniterruptible data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity.</p>
</dd>
</dl>
<p>Operations allowed: CREATE, READ</p>
<h3 id="log"><span class="header-section-number">5.1.5</span> log</h3>
<p>Configure logging for a particular module.</p>
<dl>
<dt><em>module</em> (One of ['ROUTER', 'MESSAGE', 'SERVER', 'AGENT', 'CONTAINER', 'CONFIG', 'ERROR', 'DISPATCH', 'DEFAULT'], required)</dt>
<dd><p>Module to configure. The special module 'DEFAULT' specifies defaults for all modules.</p>
</dd>
<dt><em>enable</em> (String, required, default='default')</dt>
<dd><p>Levels are: trace, debug, info, notice, warning, error, critical. The enable string is a comma-separated list of levels. A level may have a trailing '+' to enable that level and above. For example 'trace,debug,warning+' means enable trace, debug, warning, error and critical. The value 'none' means disable logging for the module. The value 'default' means use the value from the DEFAULT module.</p>
</dd>
<dt><em>timestamp</em> (Boolean)</dt>
<dd><p>Include timestamp in log messages.</p>
</dd>
<dt><em>source</em> (Boolean)</dt>
<dd><p>Include source file and line number in log messages.</p>
</dd>
<dt><em>output</em> (String)</dt>
<dd><p>Where to send log messages. Can be 'stderr', 'syslog' or a file name.</p>
</dd>
</dl>
<p>Operations allowed: CREATE, READ, UPDATE</p>
<h3 id="fixedaddress"><span class="header-section-number">5.1.6</span> fixedAddress</h3>
<p>Establishes semantics for addresses starting with a prefix.</p>
<dl>
<dt><em>prefix</em> (String, required)</dt>
<dd><p>The address prefix (always starting with '/').</p>
</dd>
<dt><em>phase</em> (Integer)</dt>
<dd><p>The phase of a multi-hop address passing through one or more waypoints.</p>
</dd>
<dt><em>fanout</em> (One of ['multiple', 'single'], default='multiple')</dt>
<dd><p>One of 'multiple' or 'single'. Multiple fanout is a non-competing pattern. If there are multiple consumers using the same address, each consumer will receive its own copy of every message sent to the address. Single fanout is a competing pattern where each message is sent to only one consumer.</p>
</dd>
<dt><em>bias</em> (One of ['closest', 'spread'], default='closest')</dt>
<dd><p>Only if fanout is single. One of 'closest' or 'spread'. Closest bias means that messages to an address will always be delivered to the closest (lowest cost) subscribed consumer. Spread bias will distribute the messages across subscribers in an approximately even manner.</p>
</dd>
</dl>
<p>Operations allowed: CREATE, READ</p>
<h3 id="waypoint"><span class="header-section-number">5.1.7</span> waypoint</h3>
<p>A remote node that messages for an address pass through.</p>
<dl>
<dt><em>address</em> (String, required)</dt>
<dd><p>The AMQP address of the waypoint.</p>
</dd>
<dt><em>connector</em> (String, required)</dt>
<dd><p>The name of the on-demand connector used to reach the waypoint's container.</p>
</dd>
<dt><em>inPhase</em> (Integer, default=-1)</dt>
<dd><p>The phase of the address as it is routed <em>to</em> the waypoint.</p>
</dd>
<dt><em>outPhase</em> (Integer, default=-1)</dt>
<dd><p>The phase of the address as it is routed <em>from</em> the waypoint.</p>
</dd>
</dl>
<p>Operations allowed: CREATE, READ</p>
<h2 id="operational-entities"><span class="header-section-number">5.2</span> Operational Entities</h2>
<p>Operational entities provide statistics and other run-time attributes of the router. The <code>qdstat(8)</code> tool provides a convenient way to query run-time statistics. You can also use the general-purpose management tool <code>qdmanage(8)</code> to query operational attributes.</p>
<h3 id="router.link"><span class="header-section-number">5.2.1</span> router.link</h3>
<p>Link to another AMQP endpoint: router node, client or other AMQP process.</p>
<p><em>linkName</em> (String)</p>
<p><em>linkType</em> (One of ['endpoint', 'waypoint', 'inter-router', 'inter-area'])</p>
<p><em>linkDir</em> (One of ['in', 'out'])</p>
<p><em>owningAddr</em> (String)</p>
<p><em>eventFifoDepth</em> (Integer)</p>
<p><em>msgFifoDepth</em> (Integer)</p>
<p><em>remoteContainer</em> (String)</p>
<p>Operations allowed: READ</p>
<h3 id="router.address"><span class="header-section-number">5.2.2</span> router.address</h3>
<p>AMQP address managed by the router.</p>
<p><em>inProcess</em> (Boolean)</p>
<p><em>subscriberCount</em> (Integer)</p>
<p><em>remoteCount</em> (Integer)</p>
<p><em>deliveriesIngress</em> (Integer)</p>
<p><em>deliveriesEgress</em> (Integer)</p>
<p><em>deliveriesTransit</em> (Integer)</p>
<p><em>deliveriesToContainer</em> (Integer)</p>
<p><em>deliveriesFromContainer</em> (Integer)</p>
<p>Operations allowed: READ</p>
<h3 id="router.node"><span class="header-section-number">5.2.3</span> router.node</h3>
<p>AMQP node managed by the router.</p>
<p><em>addr</em> (String)</p>
<p><em>nextHop</em> (Integer)</p>
<p><em>routerLink</em> (Integer)</p>
<p><em>validOrigins</em> (List)</p>
<p>Operations allowed: READ</p>
<h3 id="connection"><span class="header-section-number">5.2.4</span> connection</h3>
<p>Connections to the router's container.</p>
<p><em>container</em> (String)</p>
<p><em>state</em> (One of ['connecting', 'opening', 'operational', 'failed', 'user'])</p>
<p><em>host</em> (String)</p>
<p><em>dir</em> (One of ['in', 'out'])</p>
<p><em>role</em> (String)</p>
<p><em>sasl</em> (String)</p>
<p>Operations allowed: READ</p>
<h3 id="allocator"><span class="header-section-number">5.2.5</span> allocator</h3>
<p>Memory allocation pool.</p>
<p><em>typeSize</em> (Integer)</p>
<p><em>transferBatchSize</em> (Integer)</p>
<p><em>localFreeListMax</em> (Integer)</p>
<p><em>globalFreeListMax</em> (Integer)</p>
<p><em>totalAllocFromHeap</em> (Integer)</p>
<p><em>totalFreeToHeap</em> (Integer)</p>
<p><em>heldByThreads</em> (Integer)</p>
<p><em>batchesRebalancedToThreads</em> (Integer)</p>
<p><em>batchesRebalancedToGlobal</em> (Integer)</p>
<p>Operations allowed: READ</p>
